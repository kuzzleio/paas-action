"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugins = exports.branches = void 0;
const fs_1 = require("fs");
const branches = [
    {
        name: process.env.SEMANTIC_RELEASE_RELEASE_BRANCH ?? "main",
    },
    {
        name: process.env.SEMANTIC_RELEASE_DEVELOP_BRANCH ?? "develop",
        prerelease: true,
    },
];
exports.branches = branches;
const publishPlugins = [];
if ((0, fs_1.existsSync)("package.json")) {
    if (process.env.SEMANTIC_RELEASE_NPM_PUBLISH === "true") {
        publishPlugins.push("@semantic-release/npm");
    }
    else {
        publishPlugins.push([
            "@semantic-release/npm",
            {
                npmPublish: false,
            },
        ]);
    }
}
else {
    // eslint-disable-next-line no-console
    console.warn("Could not infer package type, assuming publication is handled externally.");
}
const plugins = [
    "@semantic-release/commit-analyzer",
    "@semantic-release/release-notes-generator",
    "@semantic-release/changelog",
    ...publishPlugins,
    "@semantic-release/github",
    "@semantic-release/git",
];
exports.plugins = plugins;
if (process.env.SEMANTIC_RELEASE_SLACK_WEBHOOK) {
    plugins.push([
        "semantic-release-slack-bot",
        {
            notifyOnFail: false,
            notifyOnSuccess: true,
            slackWebhook: process.env.SEMANTIC_RELEASE_SLACK_WEBHOOK,
        },
    ]);
}
//# sourceMappingURL=index.js.map